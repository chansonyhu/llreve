#+latex_header: \usepackage{algorithm}
#+latex_header: \usepackage{algpseudocode}
* Pseudocode
  #+begin_latex
  \begin{algorithm}
    \begin{algorithmic}[1]
      \For{$start,end\gets marks$}
        \For{$path1,path2\gets paths1[start,end]\times paths2[start,end]$}
          \State $assignments1\gets \Call{AssignmentsOnPath}{paths1}}$
          \State $assignments2\gets \Call{AssignmentsOnPath}{paths2}$
          \State $combinedPath\gets \Call{Interleave}{assignments1,assignments2}$
          \State \Call{Assert}{\{\Call{Invariant}{start}\}combinedPath\{\Call{Invariant}{end}\}}
        \EndFor
      \EndFor
    \end{algorithmic}
  \end{algorithm}
#+end_latex
* Why LLVM?
- No need to do any parsing ourselves
- Relatively low number of instructions, in particular CFG instructions
- Reuse of existing LLVM optimizations
- Low level CFG constructions (branches) not harder than gotos in C
* Examples
** Libc
* Comparison to previous Tool
- All control flow constructs are supported
- Complete C syntax including CPP is supported
- Abstraction of extern functions using $=_{input}\implies=_{output}$
* Limitations
- No bitwise operations
- No bounded integers
- No floating points
* Misc
** Quadratic blowup
Since we take the cartesian product of the paths, we get a quadratic
blowup. This hasnâ€™t been a problem in our tests, since LLVM
optimizations can convert small branches into =select=-instructions
which are directly translated into =ite=-instructions. That means that
the number of paths between two marks is usually very small.
