;;; i1 j1 n1 i2 j2
(set-logic HORN)
(set-option :produce-unsat-cores true)
(set-option :produce-proofs true)
(set-option :produce-models true)
(declare-fun INV_42_MAIN ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (! (forall ((n (_ BitVec 32)))
                   (=> (bvsge n #x00000000)
                       (bvslt n #x0000001f)
                     (INV_42_MAIN #x00000000 #x00000000 n n #x00000000)))
           :named entry))
(assert (! (forall ((n1 (_ BitVec 32)) (i1 (_ BitVec 32)) (j1 (_ BitVec 32)) (i2 (_ BitVec 32)) (j2 (_ BitVec 32)))
                 (=> (and (bvsge i2 #x00000000)
                          (bvsge n1 i1)
                          (INV_42_MAIN i1 j1 n1 i2 j2))
                     (INV_42_MAIN (bvadd i1 #x00000001) (bvadd j1 #x00000001) n1 (bvsub i2 #x00000001) (bvadd j2 #x00000001))))
           :named continue))
(assert
 (!
  (not (exists ((j1 (_ BitVec 32)) (j2 (_ BitVec 32)) (i2 (_ BitVec 32)) (n1 (_ BitVec 32)) (i1 (_ BitVec 32)))
               (and (not (= j1 j2))
                    (not (bvsge i2 #x00000000))
                    (not (bvsge n1 i1))
                    (INV_42_MAIN i1 j1 n1 i2 j2))))
  :named exit))
(assert
 (! (not (exists ((i2 (_ BitVec 32)) (n1 (_ BitVec 32)) (i1 (_ BitVec 32)) (j1 (_ BitVec 32)) (j2 (_ BitVec 32)))
               (and (bvsge i2 #x00000000)
                    (not (bvsge n1 i1))
                    (INV_42_MAIN i1 j1 n1 i2 j2))))
    :named forbidden1))
(assert
 (! (not (exists ((i2 (_ BitVec 32)) (n1 (_ BitVec 32)) (i1 (_ BitVec 32)) (j1 (_ BitVec 32)) (j2 (_ BitVec 32)))
               (and (not (bvsge i2 #x00000000))
                    (bvsge n1 i1)
                    (INV_42_MAIN i1 j1 n1 i2 j2))))
    :named forbidden2))
(check-sat)
(get-model)
(get-unsat-core)
