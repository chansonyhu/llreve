(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun INV_REC_f__2 (Int Int Int) Bool)
(declare-fun INV_REC_f__2_PRE (Int Int) Bool)
(declare-fun INV_REC_f__1 (Int Int Int) Bool)
(declare-fun INV_REC_f__1_PRE (Int Int) Bool)
(declare-fun INV_REC_f_PRE (Int Int Int Int) Bool)
(declare-fun INV_REC_f (Int Int Int Int Int Int) Bool)
(assert (not (exists ((A Int) (B Int) (C Int) (D Int))(and (and (and (and (not (= A B)) (= C 0)) (= D 0)) (= A B)) (= D C)))))
(assert (not (exists ((A Int) (B Int) (C Int) (D Int))(and (and (and (and (and (not (= A (+ B 1))) (= (+ C (- 1)) 0)) (not (= C 0))) (= D 0)) (= A B)) (= D C)))))
(assert (not (exists ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))(and (and (and (and (and (and (and (and (not (= A B)) (= C 0)) (= (+ D (- 1)) E)) (= (+ F 1) G)) (INV_REC_f__2 E G B)) (not (= (+ D (- 1)) 0))) (not (= D 0))) (= A F)) (= C D)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (and (= (+ C (- 1)) A) (= (+ D 1) B)) (not (= (+ C (- 1)) 0))) (not (= C 0))) (= E D)) (= F C)) (INV_REC_f__2_PRE A B))))
(assert (not (exists ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))(and (and (and (and (and (and (and (not (= A B)) (= (+ C (- 1)) D)) (= (+ E 1) F)) (INV_REC_f__1 D F A)) (= G 0)) (not (= C 0))) (= E B)) (= C G)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (and (= (+ C (- 1)) A) (= (+ D 1) B)) (= E 0)) (not (= C 0))) (= D F)) (= C E)) (INV_REC_f__1_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (and (and (= (+ C (- 1)) A) (= (+ D 1) B)) (= (+ E (- 1)) 0)) (not (= E 0))) (not (= C 0))) (= D F)) (= C E)) (INV_REC_f__1_PRE A B))))
(assert (not (exists ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))(and (and (and (and (and (and (and (and (not (= A (+ B 1))) (= (+ C (- 1)) D)) (= (+ E 1) F)) (INV_REC_f__1 D F A)) (= (+ G (- 1)) 0)) (not (= G 0))) (not (= C 0))) (= E B)) (= C G)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (and (and (and (= (+ E (- 1)) A) (= (+ F 1) B)) (= (+ G (- 1)) C)) (= (+ H 1) D)) (not (= (+ G (- 1)) 0))) (not (= G 0))) (not (= E 0))) (= F H)) (= E G)) (INV_REC_f_PRE A B C D))))
(assert (not (exists ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int))(and (and (and (and (and (and (and (and (and (and (not (= A B)) (= (+ C (- 1)) D)) (= (+ E 1) F)) (= (+ G (- 1)) H)) (= (+ I 1) J)) (INV_REC_f D F H J A B)) (not (= (+ G (- 1)) 0))) (not (= G 0))) (not (= C 0))) (= E I)) (= C G)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (= C 0) (= A 0)) (INV_REC_f_PRE A B C D)) (INV_REC_f A B C D B D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (and (= (+ D 1) E) (= (+ C (- 1)) 0)) (not (= C 0))) (= A 0)) (INV_REC_f_PRE A B C D)) (INV_REC_f A B C D B E))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))(=> (and (and (and (and (and (and (= A 0) (= (+ C (- 1)) F)) (= (+ D 1) G)) (INV_REC_f__2 F G E)) (not (= (+ C (- 1)) 0))) (not (= C 0))) (INV_REC_f_PRE A B C D)) (INV_REC_f A B C D B E))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (+ C (- 1)) A) (= (+ D 1) B)) (not (= (+ C (- 1)) 0))) (not (= C 0))) (INV_REC_f_PRE E F C D)) (INV_REC_f__2_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))(=> (and (and (and (and (and (= (+ A (- 1)) F) (= (+ B 1) G)) (INV_REC_f__1 F G E)) (= C 0)) (not (= A 0))) (INV_REC_f_PRE A B C D)) (INV_REC_f A B C D E D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (+ C (- 1)) A) (= (+ D 1) B)) (= E 0)) (not (= C 0))) (INV_REC_f_PRE C D E F)) (INV_REC_f__1_PRE A B))))
(assert
 (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))
         (=> (and (= (+ D 1) F)
                  (= (+ C (- 1)) 0)
                  (= (+ A (- 1)) G)
                  (= (+ B 1) H)
                  (INV_REC_f__1 G H E)
                  (not (= C 0))
                  (not (= A 0))
                  (INV_REC_f_PRE A B C D))
             (INV_REC_f A B C D E F))))
(assert
 (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))
         (=> (and (= (+ C (- 1)) A)
                  (= (+ D 1) B)
                  (= (+ E (- 1)) 0)
                  (not (= E 0))
                  (not (= C 0))
                  (INV_REC_f_PRE C D E F))
             (INV_REC_f__1_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (and (and (= (+ E (- 1)) A) (= (+ F 1) B)) (= (+ G (- 1)) C)) (= (+ H 1) D)) (not (= (+ G (- 1)) 0))) (not (= G 0))) (not (= E 0))) (INV_REC_f_PRE E F G H)) (INV_REC_f_PRE A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int))(=> (and (and (and (and (and (and (and (and (= (+ A (- 1)) G) (= (+ B 1) H)) (= (+ C (- 1)) I)) (= (+ D 1) J)) (INV_REC_f G H I J E F)) (not (= (+ C (- 1)) 0))) (not (= C 0))) (not (= A 0))) (INV_REC_f_PRE A B C D)) (INV_REC_f A B C D E F))))
(assert (forall ((A Int) (B Int))(=> (and (= A 0) (INV_REC_f__1_PRE A B)) (INV_REC_f__1 A B B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (and (= (+ C (- 1)) A) (= (+ D 1) B)) (not (= C 0))) (INV_REC_f__1_PRE C D)) (INV_REC_f__1_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (and (= (+ A (- 1)) D) (= (+ B 1) E)) (INV_REC_f__1 D E C)) (not (= A 0))) (INV_REC_f__1_PRE A B)) (INV_REC_f__1 A B C))))
(assert (forall ((A Int) (B Int))(=> (and (= A 0) (INV_REC_f__2_PRE A B)) (INV_REC_f__2 A B B))))
(assert (forall ((A Int) (B Int) (C Int))(=> (and (and (and (= (+ B 1) C) (= (+ A (- 1)) 0)) (not (= A 0))) (INV_REC_f__2_PRE A B)) (INV_REC_f__2 A B C))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (and (and (= (+ A (- 1)) D) (= (+ B 1) E)) (INV_REC_f__2 D E C)) (not (= (+ A (- 1)) 0))) (not (= A 0))) (INV_REC_f__2_PRE A B)) (INV_REC_f__2 A B C))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (and (and (= (+ C (- 1)) A) (= (+ D 1) B)) (not (= (+ C (- 1)) 0))) (not (= C 0))) (INV_REC_f__2_PRE C D)) (INV_REC_f__2_PRE A B))))
(check-sat)
